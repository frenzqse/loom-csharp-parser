<?xml version="1.0" encoding="utf-8" ?>
<!--

    Licensed to the Austrian Association for Software Tool Integration (AASTI)
    under one or more contributor license agreements. See the NOTICE file
    distributed with this work for additional information regarding copyright
    ownership. The AASTI licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<types>
<!-- "simpleTypes" are types, which should be ignored during parsing, because they allready exist in .net
	and we don't want to copy all java-types, just the interfaces and value objects -->
	<simpleTypes>
		<add>[B</add>
		<add>[C</add>
		<add>[D</add>
		<add>[F</add>
		<add>[I</add>
		<add>[J</add>
		<add>[S</add>
		<add>java.io.InputStream</add>
		<add>java.io.OutputStream</add>
		<add>java.lang.AbstractStringBuilder</add>
		<add>java.lang.Appendable</add>
		<add>java.lang.CharSequence</add>
		<add>java.lang.Class</add>
		<add>java.lang.ClassLoader</add>
		<add>java.lang.Package</add>
		<add>java.lang.StringBuffer</add>
		<add>java.lang.String</add>
		<add>java.lang.reflect.Constructor</add>
		<add>java.lang.reflect.Field</add>
		<add>java.lang.reflect.Method</add>
		<add>java.lang.reflect.Type</add>
		<!-- Feel free to add more simple types if you find some strange files in the csharp-output-direcotry (like java/lang/Integer.cs
			but don't forget to add the .net translations into the CSharpFilter-config-file, otherwise the code won't compile. -->
	</simpleTypes>

<!-- These are the actual types we want to parse. You don't have to fill in all, every type related to the one here, will also be parsed and converted, if it's not a "simpleType" -->
	<typesToParse>
		<!-- <add>full qualified type name</add> -->
		<!-- for example here, we want to convert the ExampleDomain to .net -->
		<add>org.openengsb.domain.example.ExampleDomain</add>
	</typesToParse>
</types>
